#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <queue.h>

#include "ssd1306.h"
#include "gfx.h"

#include "pico/stdlib.h"
#include <stdio.h>

#include "hardware/gpio.h"
#include "hardware/adc.h"

#include "hc06.h"

#define NUM_BUTTONS 12
//#define AXIS_X   0
//#define AXIS_Y   1
#define AXIS_POT 0  // Vamos usar 0 como código para o potenciômetro
#define POT_GPIO 26 
#define POT_ADC  0
#define AXIS_FSR 6

#define HC06_UART_ID uart1
#define HC06_BAUD_RATE 9600
//#define HC06_STATE_PIN 3  // HC-STATE

typedef struct {
    uint8_t axis;    // 0 para X, 1 para Y
    int16_t value;   // valor já filtrado e convertido (-255 a 255)
} adc_data_t;

typedef struct {
    uint gpio;
    uint8_t code;  // Código para identificar o botão
} button_config_t;

button_config_t buttons[NUM_BUTTONS] = {
    {9, 0x01}, // W
    {6, 0x02}, // S
    {7, 0x03}, // D
    {8, 0x04},  // A
    {10, 0x05}, // U
    {11, 0x09}, // I
    {12, 0x0A}, // J
    {13, 0x0B}, // K
    {21, 0x0C}, // O
    {20, 0x0D}, // L
    {19, 0x0E}, // M
    {18, 0x0F}  // nada
};

QueueHandle_t xQueueADC;
QueueHandle_t xQueueBTN;
SemaphoreHandle_t xFSRSem;

int16_t process_adc_value(uint16_t raw, uint8_t axis) {
    if (axis == AXIS_FSR) {
        if (raw < 300) return 0; // Considera "não pressionado"
        // Escala simples: 0 a 4095 -> 0 a 255
        return (raw - 300) * 255 / (4095 - 300);
    }

    int16_t val = ((int32_t)raw - 2048) * 255 / 2048;
    if (val < 30 && val > -30) {
        val = 0;
    }
     return val;
}

int16_t process_pot_value(uint16_t raw) {
    // Converte de 0-4095 para 0-255
    return raw * 255 / 4095;
}

void pot_task(void *p) {
    #define WINDOW_SIZE 8
    
    // Inicializa o GPIO para o ADC
    adc_gpio_init(POT_GPIO);

    uint16_t buffer[WINDOW_SIZE] = {0};
    uint32_t sum = 0;
    int idx = 0;
    int16_t last_sent = -1; // Inicializa com um valor impossível para garantir o primeiro envio

    while (1) {
        adc_select_input(POT_ADC);
        
        uint16_t raw = adc_read();

        // Média móvel para suavizar a leitura
        sum -= buffer[idx];
        buffer[idx] = raw;
        sum += raw;
        idx = (idx + 1) % WINDOW_SIZE;

        uint16_t avg = sum / WINDOW_SIZE;
        int16_t converted = process_pot_value(avg);

        // Envia apenas se o valor mudou significativamente (evita spam na fila)
        if (abs(converted - last_sent) > 2) {
            adc_data_t data = { .axis = AXIS_POT, .value = converted };
            xQueueSend(xQueueADC, &data, portMAX_DELAY);
            last_sent = converted;
        }

        vTaskDelay(pdMS_TO_TICKS(50)); // Atualiza a cada 50ms
    }
}

void button_task(void *p) {
    button_config_t btn = *(button_config_t *)p;
    gpio_init(btn.gpio);
    gpio_set_dir(btn.gpio, GPIO_IN);
    gpio_pull_up(btn.gpio);

    bool last_state = true;

    while (1) {
        bool current_state = gpio_get(btn.gpio);

        if (last_state && !current_state) {
            // Pressionado
            uint8_t code = btn.code;
            xQueueSend(xQueueBTN, &code, portMAX_DELAY);
        } else if (!last_state && current_state) {
            // Soltou
            uint8_t code = btn.code | 0x80; // Bit 7 indica "soltou"
            xQueueSend(xQueueBTN, &code, portMAX_DELAY);
        }

        last_state = current_state;
        vTaskDelay(pdMS_TO_TICKS(20)); // taxa de verificação rápida
    }
}


void fsr_task(void *p) {
    #define WINDOW_SIZE 8
    const uint gpio = 28;
    const uint8_t FSR_LVL1 = 0x06;
    const uint8_t FSR_LVL2 = 0x07;
    const uint8_t FSR_LVL3 = 0x08;

    adc_gpio_init(gpio);

    uint16_t buffer[WINDOW_SIZE] = {0};
    uint32_t sum = 0;
    int idx = 0;

    bool pressed = false;
    uint8_t last_sent = 0;

    while (1) {
        adc_select_input(2); // Canal 2 → FSR
        uint16_t raw = adc_read();

        sum -= buffer[idx];
        buffer[idx] = raw;
        sum += raw;
        idx = (idx + 1) % WINDOW_SIZE;

        uint16_t avg = sum / WINDOW_SIZE;
        int16_t converted = process_adc_value(avg, AXIS_FSR);

        if (converted > 0 && !pressed) {
            // Espera para estabilizar o valor da pressão
            vTaskDelay(pdMS_TO_TICKS(150));

            // Releitura após estabilização
            adc_select_input(2);
            raw = adc_read();

            // Média nova após delay
            sum -= buffer[idx];
            buffer[idx] = raw;
            sum += raw;
            idx = (idx + 1) % WINDOW_SIZE;

            avg = sum / WINDOW_SIZE;
            converted = process_adc_value(avg, AXIS_FSR);

            uint8_t current_code;

            if (converted < 0x1D)
                current_code = FSR_LVL1;
            else if (converted < 0x30)
                current_code = FSR_LVL2;
            else
                current_code = FSR_LVL3;

            xQueueSend(xQueueBTN, &current_code, portMAX_DELAY);
            pressed = true;
            last_sent = current_code;

        } else if (converted == 0 && pressed) {
            uint8_t release_code = last_sent | 0x80;
            xQueueSend(xQueueBTN, &release_code, portMAX_DELAY);
            pressed = false;
            last_sent = 0;
        }

        vTaskDelay(pdMS_TO_TICKS(40));
    }
}

void hc06_task(void *p) {
    // Inicializar UART para o HC-06
    uart_init(HC06_UART_ID, HC06_BAUD_RATE);
    gpio_set_function(HC06_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(HC06_RX_PIN, GPIO_FUNC_UART);
    
    // Inicializar o módulo HC-06
    hc06_init("ARCADESTICK", "1234");
    
    adc_data_t data;
    uint8_t code;
    uint8_t buffer[4];  // Buffer para os dados a serem enviados

    while (1) {
        // Prioridade para botões
        if (xQueueReceive(xQueueBTN, &code, 0)) {
            buffer[0] = code;
            buffer[1] = 0x00;
            buffer[2] = 0x64;
            buffer[3] = 0xFF;
            uart_write_blocking(HC06_UART_ID, buffer, 4);
        } else if (xQueueReceive(xQueueADC, &data, 0)) {
            buffer[0] = data.axis;
            buffer[1] = (data.value >> 8) & 0xFF;
            buffer[2] = data.value & 0xFF;
            buffer[3] = 0xFF; // End Of Packet
            uart_write_blocking(HC06_UART_ID, buffer, 4);
        }
        
        // Pequeno delay para evitar consumo excessivo de CPU
        vTaskDelay(pdMS_TO_TICKS(10));
    }
}

void hc06C_task(void *p) {
    uart_init(HC06_UART_ID, HC06_BAUD_RATE);
    gpio_set_function(HC06_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(HC06_RX_PIN, GPIO_FUNC_UART);
    hc06_init("ARCADESTICK", "1234");

    adc_data_t data;
    uint8_t code;
    uint8_t buffer[4];  // Buffer para os dados a serem enviados

    while (1) {
        // Prioridade para botões
        if (xQueueReceive(xQueueBTN, &code, 0)) {
            buffer[0] = code;
            buffer[1] = 0x00;
            buffer[2] = 0x64;
            buffer[3] = 0xFF;
            uart_write_blocking(HC06_UART_ID, buffer, 4);
        } else if (xQueueReceive(xQueueADC, &data, 0)) {
            buffer[0] = data.axis;
            buffer[1] = (data.value >> 8) & 0xFF;
            buffer[2] = data.value & 0xFF;
            buffer[3] = 0xFF; // End Of Packet
            uart_write_blocking(HC06_UART_ID, buffer, 4);
        }
        
        // Pequeno delay para evitar consumo excessivo de CPU
        vTaskDelay(pdMS_TO_TICKS(10));
    }
}

int main() {
    stdio_init_all();
    adc_init();

    xQueueADC = xQueueCreate(10, sizeof(adc_data_t));
    xQueueBTN = xQueueCreate(10, sizeof(uint8_t));
    xFSRSem = xSemaphoreCreateBinary();

    //xTaskCreate(adc_task, "ADC_X", 1024, (void *)0, 1, NULL);
    //xTaskCreate(adc_task, "ADC_Y", 1024, (void *)1, 1, NULL);

    xTaskCreate(pot_task, "POT", 1024, NULL, 1, NULL);

    for (int i = 0; i < NUM_BUTTONS; i++) {
        xTaskCreate(button_task, "BTN", 512, &buttons[i], 1, NULL);
    }

    xTaskCreate(fsr_task, "FSR_Read", 1024, NULL, 1, NULL);
    xTaskCreate(hc06C_task, "UART", 1024, NULL, 1, NULL);
    vTaskStartScheduler();

    while (1);
}
